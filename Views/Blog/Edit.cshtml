@using Microsoft.AspNetCore.Identity
@inject SignInManager<StudentModel> SignInManager
@inject UserManager<StudentModel> UserManager

@model GCUSMS.ViewModels.EditBlogVM

@{
    Layout = "~/Views/Shared/_Dashboard.cshtml";
}

@{ ViewData["Title"] = "Edit a Blog"; }

<div class="container-fluid">
    <h1 class="mt-1">Edit</h1>
    <hr />
    <p>
        <strong class="text-danger">NOTE</strong><br /> If your post is approved by Admin, updating it will automatically
        unpublish it and it will not be visible on the blogs page until re-approved by Admin
    </p>
    <h3 class="text-primary m-1 mb-3 p-1">Post Status</h3>
    <dl class="row">
        <dt class="col-sm-2">
            Blog Header Image
        </dt>
        <dd class="col-sm-10">
            <img src="~/images/Blogs/@Model.BlogImagePath" class="rounded float-left" style="max-height:200px" alt="User Image">
        </dd>
        <dt class="col-sm-2">
            Publication Status
        </dt>
        <dd class="col-sm-10">
            @if (Model.isApproved == true)
            {
                <span class="badge badge-success">PUBLISHED</span>
            }
            else
            {
                <span class="badge badge-info">NOT PUBLISHED</span>
            }
        </dd>
        <dt class="col-sm-2">
            Submission Status
        </dt>
        <dd class="col-sm-10">
            @if (Model.isPublished == true)
            {
                <span class="badge badge-success">SUBMITTED</span>
            }
            else
            {
                <span class="badge badge-info">NOT SUBMITTED</span>
            }
        </dd>
        <dt class="col-sm-2">
            Total Comments
        </dt>
        <dd class="col-sm-10">
            @ViewBag.TotalComments
        </dd>
    </dl>
    <hr />
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <form asp-controller="Blog" asp-action="Edit" method="post" enctype="multipart/form-data" id="parsley-form" data-parsley-validate="">
                    <input asp-for="BlogID" readonly hidden />
                    <div class="card-header">
                        <i class="fas fa-pen-fancy mr-1"></i>
                        Edit This Post
                    </div>
                    <div class="card-body">
                        <div class="form-group">
                            <label asp-for="Image"></label>
                            <div class="custom-file">
                                <label asp-for="Image" class="custom-file-label"></label>
                                <input asp-for="Image" class="custom-file-input" placeholder="Upload an Image" id="image" style="width: 30rem;">
                            </div>
                            <span asp-validation-for="Image" class="text-danger"></span>
                        </div>
                        <div class="form-group">
                            <label asp-for="Title"></label>
                            <input asp-for="Title" class="form-control" placeholder="Enter Title Here" required />
                            <span asp-validation-for="Title" class="text-danger"></span>
                        </div>
                        <div class="form-group">
                            <label asp-for="Excerpt"></label>
                            <input asp-for="Excerpt" class="form-control" placeholder="Write an Excerpt here" data-parsley-minlength="25" />
                            <span asp-validation-for="Excerpt" class="text-danger"></span>
                        </div>

                        @if (SignInManager.IsSignedIn(User))
                        {
                            if (User.IsInRole("Administrator"))
                            {
                                <div class="form-group">
                                    <label asp-for="Category">Select Category</label>
                                    <select asp-for="Category" class="form-control">
                                        <option value="" selected disabled hidden>Select Category</option>
                                        <option value="">No Category</option>
                                        <option class="font-weight-bolder" value="News">News</option>
                                    </select>
                                </div>
                            }
                        }

                        <div class="form-group">
                            <label asp-for="Content"></label>
                            <textarea asp-for="Content" class="form-control textarea" id="editor" rows="8"></textarea>
                            <span asp-validation-for="Content" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="card-footer">
                        <div class="form-group">
                            @if (@ViewBag.User == Model.Author)
                            {
                                <p class="text-muted">
                                    <i class="fa fa-arrow-circle-right"></i> &nbsp; Submit Your Post For Admin to Review, Your Post will be published on the website after
                                    Admin's approval
                                </p>

                                <label asp-for="isPublished">Submit for Approval</label><br />
                                <input type="checkbox" data-toggle="toggle" asp-for="isPublished">
                            }

                            <br />

                            <button class="btn btn-primary btn-block" type="submit">Submit</button>

                            <br />
                            <hr />

                            <p class="text-primary">
                                <i class="fa fa-arrow-circle-right text-warning"></i> &nbsp; Click the button below if you want to delete this post
                            </p>

                            <a class="btn btn-danger btn-block" asp-controller="Blog" asp-action="DeleteBlogPost" asp-route-id="@Model.BlogID" onclick="return confirm('This Blog is being deleted!')">Delete</a>


                        </div>
                        <p style="color: orangered; margin-bottom: 0;">Please Note:</p>
                        <p>
                            Your post will need to be approved before it is published to the website.
                            Please Contact Department's Office if you have any query or email us at admin@gcu.edu.pk
                        </p>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script src="https://cdn.ckeditor.com/ckeditor5/21.0.0/classic/ckeditor.js"></script>
    <script>
        class MyUploadAdapter {
            constructor(loader) {
                // The file loader instance to use during the upload. It sounds scary but do not
                // worry — the loader will be passed into the adapter later on in this guide.
                this.loader = loader;
            }

            // Starts the upload process.
            upload() {
                return this.loader.file
                    .then(file => new Promise((resolve, reject) => {
                        this._initRequest();
                        this._initListeners(resolve, reject, file);
                        this._sendRequest(file);
                    }));
            }

            // Aborts the upload process.
            abort() {
                if (this.xhr) {
                    this.xhr.abort();
                }
            }

            // Initializes the XMLHttpRequest object using the URL passed to the constructor.
            _initRequest() {
                const xhr = this.xhr = new XMLHttpRequest();

                // Note that your request may look different. It is up to you and your editor
                // integration to choose the right communication channel. This example uses
                // a POST request with JSON as a data structure but your configuration
                // could be different.
                xhr.open('POST', '@Url.Action("UploadCkEditorImage", "Blog")', true);
                xhr.responseType = 'json';
            }

            // Initializes XMLHttpRequest listeners.
            _initListeners(resolve, reject, file) {
                const xhr = this.xhr;
                const loader = this.loader;
                const genericErrorText = `Couldn't upload file: ${file.name}.`;

                xhr.addEventListener('error', () => reject(genericErrorText));
                xhr.addEventListener('abort', () => reject());
                xhr.addEventListener('load', () => {
                    const response = xhr.response;

                    // This example assumes the XHR server's "response" object will come with
                    // an "error" which has its own "message" that can be passed to reject()
                    // in the upload promise.
                    //
                    // Your integration may handle upload errors in a different way so make sure
                    // it is done properly. The reject() function must be called when the upload fails.
                    if (!response || response.error) {
                        return reject(response && response.error ? response.error.message : genericErrorText);
                    }

                    // If the upload is successful, resolve the upload promise with an object containing
                    // at least the "default" URL, pointing to the image on the server.
                    // This URL will be used to display the image in the content. Learn more in the
                    // UploadAdapter#upload documentation.
                    resolve({
                        default: response.url
                    });
                });

                // Upload progress when it is supported. The file loader has the #uploadTotal and #uploaded
                // properties which are used e.g. to display the upload progress bar in the editor
                // user interface.
                if (xhr.upload) {
                    xhr.upload.addEventListener('progress', evt => {
                        if (evt.lengthComputable) {
                            loader.uploadTotal = evt.total;
                            loader.uploaded = evt.loaded;
                        }
                    });
                }
            }

            // Prepares the data and sends the request.
            _sendRequest(file) {
                // Prepare the form data.
                const data = new FormData();

                data.append('upload', file);

                // Important note: This is the right place to implement security mechanisms
                // like authentication and CSRF protection. For instance, you can use
                // XMLHttpRequest.setRequestHeader() to set the request headers containing
                // the CSRF token generated earlier by your application.

                // Send the request.
                this.xhr.send(data);
            }
        }

        function MyCustomUploadAdapterPlugin(editor) {
            editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {
                // Configure the URL to the upload script in your back-end here!
                return new MyUploadAdapter(loader);
            };
        }


        ClassicEditor
            .create(document.querySelector('#editor'), {
                extraPlugins: [MyCustomUploadAdapterPlugin],
            })
            .then(editor => {
                window.editor = editor;
            })
            .catch(error => {
                console.error(error);
            });
    </script>

    <script>
        // Add the following code if you want the name of the file appear on select
        $(".custom-file-input").on("change", function () {
            var fileName = $(this).val().split("\\").pop();
            $(this).siblings(".custom-file-label").addClass("selected").html(fileName);
        });

    </script>

}